<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Этнографическая викторина</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
            color: #333;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding: 10px 0;
            border-bottom: 2px solid #3498db;
        }

        .score {
            font-size: 24px;
            font-weight: bold;
            color: #2c3e50;
        }

        .timer {
            font-size: 24px;
            font-weight: bold;
            color: #e74c3c;
        }

        .image-container {
            display: flex;
            justify-content: space-around;
            margin-bottom: 30px;
        }

        .image-pair img {
            width: 200px;
            height: auto;
            margin: 0 10px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .question {
            text-align: center;
            font-size: 22px;
            margin-bottom: 30px;
            color: #2c3e50;
        }

.option {
    cursor: pointer;
    transition: all 0.3s ease;
    margin: 5px;
    position: relative;
    flex: 1 1 30%;
    max-width: 30%;
    height: auto; /* Убираем фиксированную высоту */
    min-height: 200px; /* Минимальная высота для контейнера */
}

.option img {
    width: 100%;
    height: auto; /* Сохраняем пропорции */
    max-height: 250px; /* Максимальная высота изображения */
    object-fit: contain; /* Полное отображение без обрезки */
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
}

.option:hover img {
    transform: scale(2); /* Уменьшаем эффект увеличения */
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
    z-index: 1;
}

.options {
    display: flex;
    justify-content: center;
    gap: 5px; /* Уменьшаем расстояние между элементами */
    padding: 0 5px; /* Уменьшаем боковые отступы */
    align-items: center; /* Выравнивание по центру */
}

        .message {
            text-align: center;
            margin: 20px 0;
            padding: 15px;
            border-radius: 8px;
            font-size: 18px;
            font-weight: bold;
            display: none;
        }

        .correct {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .incorrect {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .next-button {
            display: block;
            margin: 20px auto;
            padding: 10px 20px;
            font-size: 16px;
            background-color: #3498db;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease;
            display: none;
        }

        .next-button:hover {
            background-color: #2980b9;
        }

        .next-button:active {
            transform: scale(0.98);
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="score">Баллы: <span id="score">50</span></div>
        <div class="timer">Время: <span id="timer">30</span> сек</div>
    </div>

    <div class="image-container">
        <div class="image-pair" id="image-pair">
            <!-- Изображения этноса будут здесь -->
        </div>
    </div>

    <div class="question">
        <h2>Какая территория у этого этноса?</h2>
    </div>

    <div class="options" id="options">
        <!-- Варианты ответов будут здесь -->
    </div>

    <div class="message" id="message"></div>

    <button class="next-button" id="next-button">Следующий вопрос</button>

    <script>
        // Глобальные переменные
        let csvData = [];
        let currentQuestion = null;
        let score = 50;
        let timer = 30;
        let timerInterval = null;
        let incorrectOptions = [];

        // Загрузка данных из CSV файла
        async function loadCSV() {
            try {
                const response = await fetch('data.csv');
                const data = await response.text();
                
                // Парсинг CSV данных
                const rows = data.split('\n');
                
                // Фильтрация и обработка строк
                csvData = rows
                    .map(row => {
                        if (!row || row.trim() === '') return null;
                        
                        const columns = row.split(';');
                        if (columns.length < 5) return null;
                        
                        return {
                            name: columns[0] || '',
                            image1: columns[1] || '',
                            image2: columns[2] || '',
                            extraInfo: columns[3] || '',
                            correctAnswer: columns[4] || ''
                        };
                    })
                    .filter(item => item && item.name && item.image1 && item.image2 && item.correctAnswer);
                
                console.log("Загружено строк данных:", csvData.length);
                
                if (csvData.length < 3) {
                    throw new Error('Недостаточно данных в CSV файле. Требуется минимум 3 строки.');
                }
                
                // Начать игру
                startNewRound();
            } catch (error) {
                console.error('Ошибка при загрузке данных:', error);
                document.body.innerHTML = `<h1>Ошибка при загрузке данных: ${error.message}. Пожалуйста, проверьте файл data.csv и перезагрузите страницу.</h1>`;
            }
        }

        // Получение случайного элемента из массива
        function getRandomItem(array) {
            if (!array || array.length === 0) {
                throw new Error('Пустой массив данных');
            }
            return array[Math.floor(Math.random() * array.length)];
        }

        // Получение случайных элементов из массива (без повторений)
        function getRandomUniqueItems(array, count, exclude = []) {
            if (!array || array.length === 0) {
                throw new Error('Пустой массив данных');
            }
            
            const result = [];
            const tempArray = [...array];
            
            // Удаление исключаемых элементов
            if (exclude && exclude.length > 0) {
                for (const item of exclude) {
                    if (!item) continue;
                    const index = tempArray.findIndex(temp => temp && temp.correctAnswer === item.correctAnswer);
                    if (index !== -1) {
                        tempArray.splice(index, 1);
                    }
                }
            }
            
            // Проверка наличия достаточного количества уникальных элементов
            if (tempArray.length < count) {
                throw new Error(`Недостаточно уникальных элементов данных. Имеется: ${tempArray.length}, требуется: ${count}`);
            }
            
            while (result.length < count && tempArray.length > 0) {
                const randomIndex = Math.floor(Math.random() * tempArray.length);
                result.push(tempArray[randomIndex]);
                tempArray.splice(randomIndex, 1);
            }
            
            return result;
        }

        // Перемешивание массива (алгоритм Фишера-Йетса)
        function shuffleArray(array) {
            if (!array) return [];
            
            const newArray = [...array];
            for (let i = newArray.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
            }
            return newArray;
        }

        // Создание нового раунда
        function startNewRound() {
            try {
                // Проверка наличия данных
                if (!csvData || csvData.length < 3) {
                    throw new Error('Недостаточно данных для игры. Требуется минимум 3 строки.');
                }
                
                // Очистка предыдущих таймеров
                if (timerInterval) {
                    clearInterval(timerInterval);
                }
                
                // Сброс сообщения и кнопки "Далее"
                document.getElementById('message').style.display = 'none';
                document.getElementById('next-button').style.display = 'none';
                
                // Выбор случайного вопроса
                currentQuestion = getRandomItem(csvData);
                console.log("Выбран вопрос:", currentQuestion.name);
                
                // Получение неправильных ответов
                incorrectOptions = getRandomUniqueItems(csvData, 2, [currentQuestion]);
                
                // Проверка путей к изображениям
                const image1Path = currentQuestion.image1.trim();
                const image2Path = currentQuestion.image2.trim();
                
                // Отображение изображений этноса
                const imagePairElement = document.getElementById('image-pair');
                imagePairElement.innerHTML = `
                    <img src="faces/${image1Path}" alt="Этнос 1" onerror="this.src='https://via.placeholder.com/200?text=Изображение+не+найдено'">
                    <img src="faces/${image2Path}" alt="Этнос 2" onerror="this.src='https://via.placeholder.com/200?text=Изображение+не+найдено'">
                `;
                
                // Создание вариантов ответов (перемешанных)
                const allOptions = [
                    { img: currentQuestion.correctAnswer.trim(), isCorrect: true },
                    { img: incorrectOptions[0].correctAnswer.trim(), isCorrect: false },
                    { img: incorrectOptions[1].correctAnswer.trim(), isCorrect: false }
                ];
                
                const shuffledOptions = shuffleArray(allOptions);
                
                // Отображение вариантов ответов
                const optionsElement = document.getElementById('options');
                optionsElement.innerHTML = '';
                
                shuffledOptions.forEach((option, index) => {
                    const optionElement = document.createElement('div');
                    optionElement.className = 'option';
                    optionElement.innerHTML = `<img src="m/${option.img}" alt="Вариант ${index + 1}" onerror="this.src='https://via.placeholder.com/180?text=Изображение+не+найдено'">`;
                    optionElement.dataset.isCorrect = option.isCorrect;
                    
                    optionElement.addEventListener('click', handleOptionClick);
                    
                    optionsElement.appendChild(optionElement);
                });
                
                // Запуск таймера
                timer = 30;
                document.getElementById('timer').textContent = timer;
                
                timerInterval = setInterval(() => {
                    timer--;
                    document.getElementById('timer').textContent = timer;
                    
                    if (timer <= 0) {
                        clearInterval(timerInterval);
                        handleTimeOut();
                    }
                }, 1000);
            } catch (error) {
                console.error('Ошибка при создании нового раунда:', error);
                document.body.innerHTML = `
                    <h1>Ошибка при создании нового раунда: ${error.message}</h1>
                    <p>Пожалуйста, проверьте файл data.csv и перезагрузите страницу.</p>
                    <p>Данные CSV: ${JSON.stringify(csvData.slice(0, 3))}</p>
                `;
            }
        }

        // Обработка выбора варианта ответа
        function handleOptionClick(event) {
            // Остановка таймера
            clearInterval(timerInterval);
            
            // Удаление обработчиков событий со всех вариантов
            document.querySelectorAll('.option').forEach(option => {
                option.removeEventListener('click', handleOptionClick);
            });
            
            const isCorrect = event.currentTarget.dataset.isCorrect === 'true';
            const messageElement = document.getElementById('message');
            const timeSpent = 30 - timer;
            
            if (isCorrect) {
                // Правильный ответ
                const pointsEarned = 30 - timeSpent;
                score += pointsEarned;
                
                messageElement.textContent = `Правильно! Вы получили ${pointsEarned} баллов.`;
                messageElement.className = 'message correct';
            } else {
                // Неправильный ответ
                score -= 30;
                
                messageElement.textContent = 'Неправильно! Вы потеряли 30 баллов.';
                messageElement.className = 'message incorrect';
            }
            
            // Обновление счета
            document.getElementById('score').textContent = score;
            
            // Показ сообщения и кнопки "Далее"
            messageElement.style.display = 'block';
            document.getElementById('next-button').style.display = 'block';
        }

        // Обработка истечения времени
        function handleTimeOut() {
            // Удаление обработчиков событий со всех вариантов
            document.querySelectorAll('.option').forEach(option => {
                option.removeEventListener('click', handleOptionClick);
            });
            
            // Вычитание баллов
            score -= 30;
            document.getElementById('score').textContent = score;
            
            // Показ сообщения и кнопки "Далее"
            const messageElement = document.getElementById('message');
            messageElement.textContent = 'Время истекло! Вы потеряли 30 баллов.';
            messageElement.className = 'message incorrect';
            messageElement.style.display = 'block';
            
            document.getElementById('next-button').style.display = 'block';
        }

        // Обработка ошибок для изображений
        function handleImageError(event) {
            event.target.src = 'https://via.placeholder.com/200?text=Изображение+не+найдено';
        }

        // Инициализация
        document.addEventListener('DOMContentLoaded', () => {
            try {
                // Загрузка данных
                loadCSV();
                
                // Обработчик для кнопки "Следующий вопрос"
                document.getElementById('next-button').addEventListener('click', startNewRound);
            } catch (error) {
                console.error('Ошибка при инициализации:', error);
                document.body.innerHTML = `<h1>Ошибка при инициализации: ${error.message}</h1>`;
            }
        });
    </script>
</body>
</html>